// <auto-generated />
using System;
using CatalyaCMS.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CatalyaCMS.Infrastructure.Migrations
{
    [DbContext(typeof(SiteDbContext))]
    partial class SiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Article", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("PublishDate");

                    b.Property<string>("SiteUserId")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.ArticleTags", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TagId");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Asset", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId")
                        .IsRequired();

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Body");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetName");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId");

                    b.Property<string>("CommentBody");

                    b.Property<DateTimeOffset>("CommentDate");

                    b.Property<string>("CommentatorId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsReply");

                    b.Property<string>("ParentCommentId");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Commentator", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Status");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Commentators");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Gallery", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("GalleryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GalleryName")
                        .IsUnique();

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Opinion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId");

                    b.Property<string>("CommentId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Like");

                    b.Property<string>("SiteUserId");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Picture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("GalleryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.SiteRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SiteRoles");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Designation")
                        .HasMaxLength(15);

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsStaff");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AuthorName")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PictureId")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PictureId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Article", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.SiteUser", "SiteUser")
                        .WithMany("Articles")
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.ArticleTags", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CatalyaCMS.Domain.DomainModels.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Asset", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Article", "Article")
                        .WithMany("Assets")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Comment", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Commentator")
                        .WithMany("Comments")
                        .HasForeignKey("CommentatorId");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Opinion", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Article", "Article")
                        .WithMany("Opinions")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CatalyaCMS.Domain.DomainModels.Comment")
                        .WithMany("Opinions")
                        .HasForeignKey("CommentId");

                    b.HasOne("CatalyaCMS.Domain.DomainModels.SiteUser", "SiteUser")
                        .WithMany()
                        .HasForeignKey("SiteUserId");
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Picture", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Article")
                        .WithMany("Pictures")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CatalyaCMS.Domain.DomainModels.Gallery", "Gallery")
                        .WithMany("Pictures")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalyaCMS.Domain.DomainModels.Tag", b =>
                {
                    b.HasOne("CatalyaCMS.Domain.DomainModels.Picture")
                        .WithMany("Tags")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
